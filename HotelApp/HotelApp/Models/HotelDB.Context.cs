//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelDBEntities : DbContext
    {
        public HotelDBEntities()
            : base("name=HotelDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CAMERA> CAMERAs { get; set; }
        public virtual DbSet<DOTARE> DOTAREs { get; set; }
        public virtual DbSet<IMAGINE> IMAGINEs { get; set; }
        public virtual DbSet<OFERTA> OFERTAs { get; set; }
        public virtual DbSet<REZERVARE> REZERVAREs { get; set; }
        public virtual DbSet<SERVICIU> SERVICIUs { get; set; }
        public virtual DbSet<STATUS> STATUS { get; set; }
        public virtual DbSet<TIPCAMERA> TIPCAMERAs { get; set; }
    
        public virtual int AddOffer(string descriere, Nullable<int> pret, Nullable<System.DateTime> checkin, Nullable<System.DateTime> checkout)
        {
            var descriereParameter = descriere != null ?
                new ObjectParameter("descriere", descriere) :
                new ObjectParameter("descriere", typeof(string));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("pret", pret) :
                new ObjectParameter("pret", typeof(int));
    
            var checkinParameter = checkin.HasValue ?
                new ObjectParameter("checkin", checkin) :
                new ObjectParameter("checkin", typeof(System.DateTime));
    
            var checkoutParameter = checkout.HasValue ?
                new ObjectParameter("checkout", checkout) :
                new ObjectParameter("checkout", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOffer", descriereParameter, pretParameter, checkinParameter, checkoutParameter);
        }
    
        public virtual int AddRoom(Nullable<int> roomNr)
        {
            var roomNrParameter = roomNr.HasValue ?
                new ObjectParameter("roomNr", roomNr) :
                new ObjectParameter("roomNr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoom", roomNrParameter);
        }
    
        public virtual int DeleteRoom(Nullable<int> roomNr)
        {
            var roomNrParameter = roomNr.HasValue ?
                new ObjectParameter("roomNr", roomNr) :
                new ObjectParameter("roomNr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoom", roomNrParameter);
        }
    
        public virtual ObjectResult<GetAvailableRooms_Result> GetAvailableRooms(Nullable<System.DateTime> datein, Nullable<System.DateTime> dateout)
        {
            var dateinParameter = datein.HasValue ?
                new ObjectParameter("datein", datein) :
                new ObjectParameter("datein", typeof(System.DateTime));
    
            var dateoutParameter = dateout.HasValue ?
                new ObjectParameter("dateout", dateout) :
                new ObjectParameter("dateout", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailableRooms_Result>("GetAvailableRooms", dateinParameter, dateoutParameter);
        }
    
        public virtual ObjectResult<string> GetFeatures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetFeatures");
        }
    
        public virtual ObjectResult<GetOffers_Result> GetOffers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOffers_Result>("GetOffers");
        }
    
        public virtual ObjectResult<GetRooms_Result> GetRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRooms_Result>("GetRooms");
        }
    
        public virtual ObjectResult<GetRoomTypes_Result> GetRoomTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomTypes_Result>("GetRoomTypes");
        }
    
        public virtual int UpdateRoomFeature(Nullable<int> roomNr, string feature)
        {
            var roomNrParameter = roomNr.HasValue ?
                new ObjectParameter("roomNr", roomNr) :
                new ObjectParameter("roomNr", typeof(int));
    
            var featureParameter = feature != null ?
                new ObjectParameter("feature", feature) :
                new ObjectParameter("feature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoomFeature", roomNrParameter, featureParameter);
        }
    
        public virtual int UpdateRoomPrice(Nullable<int> roomNr, Nullable<int> price)
        {
            var roomNrParameter = roomNr.HasValue ?
                new ObjectParameter("roomNr", roomNr) :
                new ObjectParameter("roomNr", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoomPrice", roomNrParameter, priceParameter);
        }
    
        public virtual int UpdateRoomService(Nullable<int> roomNr, string service)
        {
            var roomNrParameter = roomNr.HasValue ?
                new ObjectParameter("roomNr", roomNr) :
                new ObjectParameter("roomNr", typeof(int));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoomService", roomNrParameter, serviceParameter);
        }
    }
}
